public class OrderProcessor {

    private final Database database;
    private final EmailService emailService;
    private final InventorySystem inventorySystem;
    private final DiscountService discountService;

    public OrderProcessor(Database database, EmailService emailService, InventorySystem inventorySystem, DiscountService discountService) {
        this.database = database;
        this.emailService = emailService;
        this.inventorySystem = inventorySystem;
        this.discountService = discountService;
    }

    public void processOrder(Order order) {
        // Vérifier la disponibilité des articles en stock
        checkStock(order);
        // Enregistrer la commande dans la base de données
        database.saveOrder(order);
        // Envoyer un e-mail de confirmation au client
        sendComfirmationOrder(order);
        // Mettre à jour l'inventaire
        updateInventory(order);
        // Appliquer une remise pour les clients fidèles
        applyDiscountIfApplayable(order);
    }

    private void checkStock(Order order) {
        for (Item item : order.getItems()) {
            if (!inventorySystem.isItemAvailable(item)) {
                throw new NotAvailableArticleException("Item not available in inventory : " + item.getName());
            }
        }
    }

    private void sendComfirmationOrder(Order order) {
        String message = "Your order has been received and is being processed.";
        emailService.sendEmail(order.getCustomerEmail(), "Order Confirmation", message);
    }

    private void updateInventory(Order order) {
        for (Item item : order.getItems()) {
            inventorySystem.updateInventory(item, item.getQuantity() * -1);
        }
    }

    private void applyDiscountIfApplayable(Order order) {
        if (order instanceof LoyalCustomerOrder) {
            discountService.applyDiscount((LoyalCustomerOrder) order);
        }
    }
}

public class DiscountService {
    private static final double DISCOUNT = 0.10;

    public void applyDiscount(LoyalCustomerOrder order) {
        double discountPrice = order.getTotalPrice() * (1 - DISCOUNT);
        order.setTotalPrice(discountPrice);
    }
}

public class NotAvailableArticleException extends RuntimeException {
    public NotAvailableArticleException(String message) {
        super(message);
    }
}

public class LoyalCustomerOrder extends Order {
    @Override
    public void applyDiscount() {
        setTotalPrice(getTotalPrice() * 0.9);
    }
}
